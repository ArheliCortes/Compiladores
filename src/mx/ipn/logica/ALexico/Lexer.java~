/* The following code was generated by JFlex 1.4.3 on 12/06/18 21:09 */

package mx.ipn.logica.ALexico;
import static mx.ipn.logica.ALexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/06/18 21:09 from the specification file
 * <tt>C:/Users/arhel/Documents/NetBeansProjects/Proyecto_Compilador/src/mx/ipn/logica/ALexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\5\2\0\1\5\22\0\1\11\1\16\1\0\1\6"+
    "\1\3\1\22\1\23\1\24\1\26\1\27\1\7\1\13\1\25\1\14"+
    "\1\0\1\15\1\2\11\2\1\12\1\0\1\21\1\17\1\20\1\3"+
    "\1\33\32\1\4\0\1\32\1\0\1\43\1\54\1\36\1\51\1\46"+
    "\1\52\1\53\1\45\1\35\2\1\1\55\1\47\1\40\1\37\1\44"+
    "\1\1\1\42\1\34\1\41\1\50\1\56\4\1\1\30\1\4\1\31"+
    "\1\3\42\0\1\3\35\0\1\3\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\3\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\5\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\2"+
    "\13\3\1\26\2\6\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\0\1\45\1\46\7\3\1\47\7\3\3\6"+
    "\1\50\1\0\16\3\1\51\1\3\1\6\2\0\1\6"+
    "\1\4\3\3\1\52\2\3\1\53\4\3\1\54\3\3"+
    "\2\0\5\3\1\55\4\3\1\56\2\3\1\57\1\3"+
    "\1\60\5\3\1\61\1\62\2\3\1\63\1\64\2\3"+
    "\1\65\1\66\2\3\1\67\1\70\1\3\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\274\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\274\0\u0292\0\u02c1\0\57\0\u02f0\0\57\0\57\0\57"+
    "\0\136\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\57\0\u0553\0\u0582"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\274\0\u05b1\0\u05e0"+
    "\0\57\0\136\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\57\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\136\0\u0c1e\0\u0c4d\0\u08ff"+
    "\0\u0c7c\0\u0cab\0\57\0\u0cda\0\u0d09\0\u0d38\0\136\0\u0d67"+
    "\0\u0d96\0\136\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\136\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0cab\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u0ff9\0\136\0\u1028\0\u1057\0\u1086\0\u10b5\0\136\0\u10e4"+
    "\0\u1113\0\u1142\0\u1171\0\136\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\136\0\136\0\u128b\0\u12ba\0\136\0\136\0\u12e9"+
    "\0\u1318\0\136\0\136\0\u1347\0\u1376\0\136\0\136\0\u13a5"+
    "\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\7\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\3\3\1\36"+
    "\1\3\1\37\1\40\1\41\1\42\2\3\1\43\2\3"+
    "\1\44\1\45\60\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\23\3\1\0"+
    "\1\5\1\4\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\5\1\0\23\5\1\0\3\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\5\1\0"+
    "\23\5\4\0\1\46\52\0\5\47\1\7\1\47\1\50"+
    "\47\47\7\0\1\51\2\0\1\52\1\53\1\54\1\55"+
    "\54\0\1\56\57\0\1\57\43\0\3\5\3\0\1\5"+
    "\5\0\2\5\1\0\1\60\1\0\3\5\5\0\1\5"+
    "\1\61\23\5\1\0\3\5\3\0\1\5\5\0\2\5"+
    "\1\62\2\0\3\5\5\0\1\5\1\0\23\5\17\0"+
    "\1\63\54\0\1\64\1\0\1\65\40\0\3\5\3\0"+
    "\1\5\5\0\2\5\3\0\1\5\1\66\1\5\5\0"+
    "\1\5\1\0\23\5\1\0\3\5\3\0\1\5\1\0"+
    "\1\67\3\0\2\5\3\0\3\5\5\0\1\5\1\0"+
    "\23\5\14\0\1\70\57\0\1\71\42\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\1\3\1\72\21\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\13\3\1\73\7\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\3\3"+
    "\1\74\3\3\1\75\4\3\1\76\6\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\12\3\1\77\10\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\7\3\1\100\13\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\7\3\1\101\13\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\1\102"+
    "\3\3\1\103\16\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\1\3"+
    "\1\104\21\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\1\3\1\105"+
    "\1\3\1\106\3\3\1\107\13\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\12\3\1\110\10\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\7\3\1\111\13\3\5\47\1\7\51\47\5\112\1\113"+
    "\1\112\1\114\47\112\24\0\1\115\34\0\1\116\55\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\10\3\1\117\12\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\4\3\1\120\14\3\1\121\1\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\1\122\22\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\7\3\1\123\13\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\17\3\1\124\3\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\6\3"+
    "\1\125\14\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\2\3\1\126"+
    "\20\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\2\3\1\127\20\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\3\3\1\130\17\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\12\3\1\131\10\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\4\3\1\132\16\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\4\3\1\133\16\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\21\3\1\134\1\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\12\3"+
    "\1\135\10\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\21\3\1\136"+
    "\1\3\5\112\1\113\1\112\1\137\47\112\7\140\1\141"+
    "\47\140\5\114\1\142\1\114\1\47\47\114\2\0\1\116"+
    "\24\0\1\143\30\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\6\3\1\144"+
    "\14\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\5\3\1\145\15\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\12\3\1\146\10\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\3\3\1\147\17\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\4\3\1\150\16\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\6\3\1\151\14\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\7\3\1\152\13\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\12\3"+
    "\1\153\10\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\6\3\1\154"+
    "\14\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\5\3\1\155\15\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\4\3\1\156\16\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\157\1\0\23\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\5\3\1\160\15\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\1\161"+
    "\22\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\1\3\1\162\21\3"+
    "\5\112\1\113\1\47\1\137\47\112\6\140\1\7\1\141"+
    "\47\140\7\163\1\164\47\163\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\1\3\1\165\21\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\6\3"+
    "\1\166\14\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\2\3\1\167"+
    "\20\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\15\3\1\170\5\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\12\3\1\171\10\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\6\3\1\172\14\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\1\3\1\173\21\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\6\3\1\174\14\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\5\3\1\175\15\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\7\3"+
    "\1\176\13\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\3\3\1\177"+
    "\17\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\15\3\1\200\5\3"+
    "\6\0\1\7\1\164\50\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\13\3"+
    "\1\201\7\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\7\3\1\202"+
    "\13\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\2\3\1\203\20\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\3\3\1\204\17\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\1\205\22\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\20\3\1\206\2\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\3\3\1\207\17\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\6\3"+
    "\1\210\14\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\4\3\1\211"+
    "\16\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\3\3\1\212\17\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\12\3\1\213\10\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\1\214\22\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\1\3\1\215\21\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\7\3\1\216\13\3\1\0\2\3\1\5\3\0\1\5"+
    "\5\0\2\5\3\0\3\5\5\0\1\3\1\0\12\3"+
    "\1\217\10\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\2\3\1\220"+
    "\20\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\7\3\1\221\13\3"+
    "\1\0\2\3\1\5\3\0\1\5\5\0\2\5\3\0"+
    "\3\5\5\0\1\3\1\0\7\3\1\222\13\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\1\3\1\223\21\3\1\0\2\3"+
    "\1\5\3\0\1\5\5\0\2\5\3\0\3\5\5\0"+
    "\1\3\1\0\3\3\1\224\17\3\1\0\2\3\1\5"+
    "\3\0\1\5\5\0\2\5\3\0\3\5\5\0\1\3"+
    "\1\0\7\3\1\225\13\3\1\0\2\3\1\5\3\0"+
    "\1\5\5\0\2\5\3\0\3\5\5\0\1\3\1\0"+
    "\1\226\22\3\1\0\2\3\1\5\3\0\1\5\5\0"+
    "\2\5\3\0\3\5\5\0\1\3\1\0\4\3\1\227"+
    "\16\3\1\0\2\3\1\5\3\0\1\5\5\0\2\5"+
    "\3\0\3\5\5\0\1\3\1\0\1\230\22\3\1\0"+
    "\2\3\1\5\3\0\1\5\5\0\2\5\3\0\3\5"+
    "\5\0\1\3\1\0\3\3\1\231\17\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5076];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\14\1\1\11\1\1\3\11"+
    "\15\1\1\11\2\1\15\11\1\1\2\0\1\11\23\1"+
    "\1\11\1\0\21\1\2\0\1\1\1\11\17\1\2\0"+
    "\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lexeme=yytext(); return ID;
          }
        case 58: break;
        case 56: 
          { return COLECCION;
          }
        case 59: break;
        case 45: 
          { return HACER;
          }
        case 60: break;
        case 46: 
          { return FALSO;
          }
        case 61: break;
        case 19: 
          { return LLAVE_ABIERTA;
          }
        case 62: break;
        case 31: 
          { return ARROBA_CERRADO;
          }
        case 63: break;
        case 33: 
          { return MAYOR_IGUAL;
          }
        case 64: break;
        case 20: 
          { return LLAVE_CERRADA;
          }
        case 65: break;
        case 49: 
          { return VALIDO;
          }
        case 66: break;
        case 39: 
          { return ES;
          }
        case 67: break;
        case 34: 
          { return DIPLE_ABIERTO;
          }
        case 68: break;
        case 14: 
          { return MOD;
          }
        case 69: break;
        case 44: 
          { return FIN_;
          }
        case 70: break;
        case 27: 
          { return ASIGNAR_DIV;
          }
        case 71: break;
        case 26: 
          { return ASIGNAR_MENOS;
          }
        case 72: break;
        case 47: 
          { return CONTRA;
          }
        case 73: break;
        case 30: 
          { return DIPLE_CERRADO;
          }
        case 74: break;
        case 22: 
          { return OR;
          }
        case 75: break;
        case 11: 
          { return DIV;
          }
        case 76: break;
        case 4: 
          { lexeme=yytext(); return ENT;
          }
        case 77: break;
        case 55: 
          { return MIENTRAS;
          }
        case 78: break;
        case 36: 
          { return AND;
          }
        case 79: break;
        case 10: 
          { return RESTA;
          }
        case 80: break;
        case 42: 
          { return CASO;
          }
        case 81: break;
        case 12: 
          { return MAYOR;
          }
        case 82: break;
        case 54: 
          { return CONTRASI;
          }
        case 83: break;
        case 16: 
          { return COMA;
          }
        case 84: break;
        case 5: 
          { lexeme=yytext(); return RISTRA;
          }
        case 85: break;
        case 48: 
          { return CUANDO;
          }
        case 86: break;
        case 9: 
          { return SUMA;
          }
        case 87: break;
        case 35: 
          { return MENOR_IGUAL;
          }
        case 88: break;
        case 43: 
          { return PARA;
          }
        case 89: break;
        case 1: 
          { lexeme=yytext(); return NAT;
          }
        case 90: break;
        case 17: 
          { return PARENTESIS_ABIERTO;
          }
        case 91: break;
        case 8: 
          { return ASIGNAR;
          }
        case 92: break;
        case 51: 
          { return REGRESA;
          }
        case 93: break;
        case 41: 
          { return LEE;
          }
        case 94: break;
        case 24: 
          { return IGUAL;
          }
        case 95: break;
        case 53: 
          { return FONTANA;
          }
        case 96: break;
        case 15: 
          { return COMILLA;
          }
        case 97: break;
        case 18: 
          { return PARENTESIS_CERRADO;
          }
        case 98: break;
        case 29: 
          { return POS_DECREMENTO;
          }
        case 99: break;
        case 40: 
          { lexeme=yytext(); return GRAF;
          }
        case 100: break;
        case 32: 
          { return DIFERENTE;
          }
        case 101: break;
        case 2: 
          { return ERROR;
          }
        case 102: break;
        case 28: 
          { return POS_INCREMENTO;
          }
        case 103: break;
        case 23: 
          { return ASIGNAR_POR;
          }
        case 104: break;
        case 38: 
          { return SI;
          }
        case 105: break;
        case 13: 
          { return MENOR;
          }
        case 106: break;
        case 21: 
          { return GUION_BAJO;
          }
        case 107: break;
        case 6: 
          { /*Ignore*/
          }
        case 108: break;
        case 25: 
          { return ASIGNAR_MAS;
          }
        case 109: break;
        case 52: 
          { return ESCRIBE;
          }
        case 110: break;
        case 57: 
          { return ENOTROCASO;
          }
        case 111: break;
        case 50: 
          { return PALABRA_RESERVADA;
          }
        case 112: break;
        case 37: 
          { return ARROBA_ABIERTO;
          }
        case 113: break;
        case 7: 
          { return MUL;
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
